name: Release Automation

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.4.2)'
        required: true
        type: string

# GO_VERSION is read from go.mod file in each job

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease (contains -, like v1.0.0-alpha, v1.0.0-beta)
          if [[ "${VERSION}" == *"-"* ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ ! "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Invalid version format: ${VERSION}"
            echo "Expected format: v1.2.3 or v1.2.3-alpha"
            exit 1
          fi
          
      - name: Check if CHANGELOG.md is updated
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          if ! grep -q "\[${VERSION_NO_V}\]" CHANGELOG.md; then
            echo "CHANGELOG.md doesn't contain entry for version ${VERSION_NO_V}"
            echo "Please update CHANGELOG.md before releasing"
            exit 1
          fi

  build-cross-platform:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            ext: .exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          BINARY_NAME="utify-${GOOS}-${GOARCH}${{ matrix.ext }}"
          
          # Build with version info
          go build -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "${BINARY_NAME}" .
            
          # Create checksums
          if command -v sha256sum >/dev/null; then
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: utify-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            utify-*
            *.sha256

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-cross-platform]
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts/ -name "utify-*" -type f -exec cp {} release-files/ \;
          ls -la release-files/
          
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Extract changelog entry for this version
          awk "/^## \[${VERSION_NO_V}\]/,/^## \[/{if(/^## \[${VERSION_NO_V}\]/) print; else if(/^## \[/ && !/^## \[${VERSION_NO_V}\]/) exit; else print}" CHANGELOG.md > release-notes.md
          
          # Remove the version header and first empty line
          tail -n +3 release-notes.md > temp-notes.md
          mv temp-notes.md release-notes.md
          
          echo "Release notes generated:"
          cat release-notes.md
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          files: release-files/*
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          generate_release_notes: true
          discussion_category_name: "Releases"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update latest release tag (if not prerelease)
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f latest
          git push origin latest --force

  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          
      - name: Publish to Go Module Proxy
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "Publishing ${VERSION} to Go module proxy..."
          GOPROXY=proxy.golang.org go list -m github.com/jsas4coding/utify@${VERSION}
          
      - name: Create GitHub Packages release
        run: |
          # This would publish to GitHub Container Registry if needed
          echo "Release ${{ needs.validate-release.outputs.version }} published successfully!"